generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model profiles {
  id      String  @id @db.Uuid
  name    String?
  surname String?
  role    String? @default("user")
  status  String? @default("unblocked")
  email   String?
}

model Inventory {
  id             String          @id @default(uuid())
  title          String
  description    String
  imageUrl       String?
  isPublic       Boolean         @default(false)
  customIdFormat Json
  fields         Json
  version        Int             @default(1)
  ownerId        String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  category       String?
  comments       Comment[]
  InventoryTag   InventoryTag[]
  users          InventoryUser[]
  items          Item[]
}

model InventoryUser {
  inventoryId String
  userId      String
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  @@id([inventoryId, userId])
}

model Item {
  id          String    @id @default(uuid())
  inventoryId String
  customId    String
  fields      Json
  createdBy   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  version     Int       @default(1)
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  likes       Like[]

  @@unique([inventoryId, customId])
}

model Comment {
  id          String    @id @default(uuid())
  inventoryId String
  userId      String
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
}

model Like {
  id        String   @id @default(uuid())
  itemId    String
  userId    String
  createdAt DateTime @default(now())
  item      Item     @relation(fields: [itemId], references: [id])

  @@unique([itemId, userId])
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id           String         @id @default(uuid())
  name         String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
  InventoryTag InventoryTag[]
}

model InventoryTag {
  inventoryId String
  tagId       String
  Inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  Tag         Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([inventoryId, tagId])
}
