generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model profiles {
  id      String  @id @db.Uuid
  name    String?
  surname String?
  role    String? @default("user")
  status  String? @default("unblocked")
  email   String?
  inventories Inventory[]
}

model Inventory {
  id             String          @id @default(uuid())
  title          String
  description    String
  imageUrl       String?
  isPublic       Boolean         @default(false)
  customIdFormat Json
  fieldConfigs   InventoryFieldConfig[]
  version        Int             @default(1)
  ownerId        String          @db.Uuid
  owner          profiles        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  category       String?
  comments       Comment[]
  InventoryTag   InventoryTag[]
  users          InventoryUser[]
  items          Item[]
}

model InventoryFieldConfig {
  inventoryId    String
  slot           FieldSlot
  type           String     @default("text")
  title          String
  description    String?
  visibleInTable Boolean @default(true)
  position       Int

  inventory Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  @@id([inventoryId, slot]) // по инвентарю каждый слот максимум один
}

model InventoryUser {
  inventoryId String
  userId      String
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  @@id([inventoryId, userId])
}

model Item {
  id          String   @id @default(uuid())
  inventoryId String
  customId    String
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  version     Int      @default(1)

  // ФИКСИРОВАННЫЕ ЗНАЧЕНИЯ ПОЛЕЙ (никакого JSON):
  text1       String?
  text2       String?
  text3       String?
  multiline1  String?
  multiline2  String?
  multiline3  String?
  number1     Float?
  number2     Float?
  number3     Float?
  link1       String?
  link2       String?
  link3       String?
  boolean1    Boolean?
  boolean2    Boolean?
  boolean3    Boolean?

  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  likes       Like[]

  @@unique([inventoryId, customId])
}

model Comment {
  id          String    @id @default(uuid())
  inventoryId String
  userId      String
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
}

model Like {
  id        String   @id @default(uuid())
  itemId    String
  userId    String
  createdAt DateTime @default(now())
  item      Item     @relation(fields: [itemId], references: [id])

  @@unique([itemId, userId])
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id           String         @id @default(uuid())
  name         String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
  InventoryTag InventoryTag[]
}

model InventoryTag {
  inventoryId String
  tagId       String
  Inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  Tag         Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([inventoryId, tagId])
}

enum FieldSlot {
  text1
  text2
  text3
  multiline1
  multiline2
  multiline3
  number1
  number2
  number3
  link1
  link2
  link3
  boolean1
  boolean2
  boolean3
}



